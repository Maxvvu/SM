const express = require("express"); const router = express.Router(); const { authenticateToken, isAdmin } = require("../middleware/auth"); const { get, run } = require("../models/database"); router.get("/", authenticateToken, isAdmin, async (req, res) => { try { const { page = 1, pageSize = 20, type, startDate, endDate } = req.query; const skip = (parseInt(page) - 1) * parseInt(pageSize); const limit = parseInt(pageSize); let sql = "SELECT * FROM operation_logs WHERE 1=1"; const params = []; if (type) { sql += " AND type = ?"; params.push(type); } if (startDate && endDate) { sql += " AND timestamp BETWEEN ? AND ?"; params.push(startDate, endDate); } sql += " ORDER BY timestamp DESC LIMIT ? OFFSET ?"; params.push(limit, skip); const countSql = sql.replace("SELECT *", "SELECT COUNT(*) as total").split("ORDER BY")[0]; const [logs, [totalResult]] = await Promise.all([ get(sql, params), get(countSql, params.slice(0, -2)) ]); res.json({ logs, total: totalResult.total, page: parseInt(page), pageSize: parseInt(pageSize) }); } catch (error) { console.error("获取操作日志失败:", error); res.status(500).json({ message: "获取操作日志失败" }); } }); router.post("/", authenticateToken, async (req, res) => { try { const { type, module, description, status = "success" } = req.body; const result = await run("INSERT INTO operation_logs (username, type, module, description, status, ip) VALUES (?, ?, ?, ?, ?, ?)", [req.user.username, type, module, description, status, req.ip]); res.status(201).json({ id: result.lastID }); } catch (error) { console.error("添加操作日志失败:", error); res.status(500).json({ message: "添加操作日志失败" }); } }); module.exports = router;
